/***************************************************************************//**
* \file cyhal_hw_types.h
*
* \brief
* Provides a struct definitions for configuration resources in the PDL.
*
********************************************************************************
* \copyright
* Copyright 2018-2021 Cypress Semiconductor Corporation (an Infineon company) or
* an affiliate of Cypress Semiconductor Corporation
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

/**
* \addtogroup group_hal_impl CAT2 (PMG/PSoC™ 4) Implementation Specific
* \{
* This section provides details about the PMG/PSoC™ 4 implementation of the Cypress HAL.
* All information within this section is platform specific and is provided for reference.
* Portable application code should depend only on the APIs and types which are documented
* in the @ref group_hal section.
*
* \section group_hal_impl_mapping HAL Resource Hardware Mapping
* The following table shows a mapping of each HAL driver to the lower level firmware driver
* and the corresponding hardware resource. This is intended to help understand how the HAL
* is implemented for PMG/PSoC™ 4 and what features the underlying hardware supports.
*
* | HAL Resource       | PDL Driver(s)       | CAT2 Hardware                    |
* | ------------------ | ------------------- | -------------------------------- |
* | ADC                | cy_adc              | SAR ADC                          |
* | Clock              | cy_sysclk           | All clocks (system & peripheral) |
* | Comparator         | cy_ctb or cy_lpcomp | CTBm or LPComp                   |
* | CRC                | cy_crypto_crc       | Crypto                           |
* | DMA                | cy_dmac             | DMA Controller                   |
* | EZI2C              | cy_scb_ezi2c        | SCB                              |
* | Flash              | cy_flash            | Flash                            |
* | GPIO               | cy_gpio             | GPIO                             |
* | Hardware Manager   | NA                  | NA                               |
* | I2C                | cy_scb_i2c          | SCB                              |
* | LPTimer            | cy_mcwdt            | MCWDT                            |
* | Opamp              | cy_ctb              | CTBm                             |
* | PWM                | cy_pwm              | TCPWM                            |
* | Quadrature Decoder | cy_tcpwm_quaddec    | TCPWM                            |
* | SPI                | cy_scb_spi          | SCB                              |
* | SysPM              | cy_syspm            | System Power Resources           |
* | System             | cy_syslib           | System Resources                 |
* | Timer              | cy_tcpwm_counter    | TCPWM                            |
* | TRNG               | cy_crypto_trng      | Crypto                           |
* | UART               | cy_scb_uart         | SCB                              |
* | WDT                | cy_wdt              | WDT                              |
*
* \section group_hal_impl_errors Device Specific Errors
* Error codes generated by the low level level PDL driver all use module IDs starting
* with \ref CY_RSLT_MODULE_DRIVERS_PDL_BASE. The exact errors are documented for each
* driver in the
* <a href="https://infineon.github.io/mtb-pdl-cat2/pdl_api_reference_manual/html/index.html">
* mtb-pdl-cat2 documentation</a>.
*/

/**
* \addtogroup group_hal_impl_hw_types PMG/PSoC™ 4 Specific Hardware Types
* \{
* Aliases for types which are part of the public HAL interface but whose representations
* need to vary per HAL implementation
*/

#pragma once

#include "cy_pdl.h"
#include "cyhal_general_types.h"
#include "cyhal_hw_resources.h"
#include "cyhal_pin_package.h"
#include "cyhal_triggers.h"
#include <stdbool.h>

#ifdef __cplusplus
extern "C" {
#endif


#ifndef CYHAL_ISR_PRIORITY_DEFAULT
/** Priority that is applied by default to all drivers when initialized. Priorities can be
 * overridden on each driver as part of enabling events.
 */
#define CYHAL_ISR_PRIORITY_DEFAULT  (3)
#endif

/**
* \cond INTERNAL
*/

#define CYHAL_DMA_IMPL_HEADER           "cyhal_dma_impl.h"          //!< Implementation specific header for DMA
#define CYHAL_CLOCK_IMPL_HEADER         "cyhal_clock_impl.h"        //!< Implementation specific header for Clocks
#define CYHAL_GPIO_IMPL_HEADER          "cyhal_gpio_impl.h"         //!< Implementation specific header for GPIO
#define CYHAL_I2S_IMPL_HEADER           "cyhal_i2s_impl.h"          //!< Implementation specific header for I2S
#define CYHAL_PWM_IMPL_HEADER           "cyhal_pwm_impl.h"          //!< Implementation specific header for PWM
#define CYHAL_QUADDEC_IMPL_HEADER       "cyhal_quaddec_impl.h"      //!< Implementation specific header for QUADDEC
#define CYHAL_SYSTEM_IMPL_HEADER        "cyhal_system_impl.h"       //!< Implementation specific header for System
#define CYHAL_SYSPM_IMPL_HEADER         "cyhal_syspm_impl.h"        //!< Implementation specific header for System Power Management
#define CYHAL_TDM_IMPL_HEADER           "cyhal_tdm_impl.h"          //!< Implementation specific header for TDM
#define CYHAL_TIMER_IMPL_HEADER         "cyhal_timer_impl.h"        //!< Implementation specific header for Timer
#define CYHAL_INTERCONNECT_IMPL_HEADER  "cyhal_interconnect_impl.h" //!< Implementation specific header for Interconnect

#if (_CYHAL_DRIVER_AVAILABLE_CRYPTO)
#define CYHAL_CRC_IMPL_HEADER           "cyhal_crc_impl.h"      //!< Implementation specific header for CRC
#define CYHAL_TRNG_IMPL_HEADER          "cyhal_trng_impl.h"     //!< Implementation specific header for TRNG
#endif

/** \endcond */

/** Callbacks for Sleep and Deepsleep APIs */
#define cyhal_system_callback_t cy_stc_syspm_callback_t

/** @brief Event callback data object */
typedef struct {
    cy_israddress callback;
    void*         callback_arg;
} cyhal_event_callback_data_t;

/**
 * @brief Shared data between timer/counter and PWM
 *
 * Application code should not rely on the specific content of this struct.
 * They are considered an implementation detail which is subject to change
 * between platforms and/or HAL releases.
 */
typedef struct {
#ifdef CY_IP_M0S8TCPWM
    bool                         owned_by_configurator;
    TCPWM_Type*                  base;
    cyhal_resource_inst_t        resource;
    cyhal_clock_t                clock;
    bool                         dedicated_clock;
    uint32_t                     clock_hz;
    cyhal_event_callback_data_t  callback_data;
#if defined(CY_IP_M0S8PERI_TR)
    cyhal_source_t               inputs[5];
#endif
#else
    void *empty;
#endif
} cyhal_tcpwm_t;

// This is presented out of order as a number of other items depend on it
/**
  * @brief DMA object
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef struct {
#if defined(CY_IP_M0S8CPUSSV3_DMAC)
    cyhal_resource_inst_t           resource;
    cy_stc_dmac_channel_config_t    channel_config;
    cy_stc_dmac_descriptor_config_t descriptor_config;
    cy_en_dmac_descriptor_t         descriptor;
    uint16_t                        expected_bursts;
    uint32_t                        direction;
    uint32_t                        irq_cause;
    cyhal_event_callback_data_t     callback_data;
    cyhal_source_t                  source;
    bool                            owned_by_configurator;
#else
    void *empty;
#endif
} cyhal_dma_t;

/**
  * @brief DMA configurator struct
  *
  * This struct allows a configurator to provide block configuration information
  * to the HAL. Because configurator-generated configurations are platform
  * specific, the contents of this struct is subject to change between platforms
  * and/or HAL releases.
  */
typedef struct
{
#if defined(CY_IP_M0S8CPUSSV3_DMAC)
    const cyhal_resource_inst_t*            resource;
    cy_stc_dmac_channel_config_t const*     channel_config;
    cy_stc_dmac_descriptor_config_t const*  descriptor_config;
#else
    void *empty;
#endif /* CYHAL_DRIVER_AVAILABLE_DMA */
} cyhal_dma_configurator_t;

/**
  * @brief ADC object
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef struct {
#ifdef CY_IP_M0S8PASS4A_SAR_INSTANCES
    bool                            owned_by_configurator;
    SAR_Type*                       base;
    cyhal_resource_inst_t           resource;
    cyhal_clock_t                   clock;
    cyhal_gpio_t                    ext_vref;
    cyhal_gpio_t                    bypass_pin;
    cyhal_source_t                  source;
    bool                            dedicated_clock;
    bool                            continuous_scanning;
    /* Has at least one conversion completed since the last configuration change */
    volatile bool                   conversion_complete;
    bool                            stop_after_scan;
    struct _cyhal_adc_channel_s*    channel_config[CY_SAR_SEQ_NUM_CHANNELS];
    uint8_t                         user_enabled_events;
    cyhal_event_callback_data_t     callback_data;
    cyhal_async_mode_t              async_mode;
    uint8_t                         resolution;
#if defined(CY_IP_M0S8CPUSSV3_DMAC)
    cyhal_dma_t                     dma;
#endif
    /* Always updated to contain the location where the next result should be stored */
    int32_t                         *async_buff_orig;
    int32_t                         *async_buff_next;
    bool                            async_transfer_in_uv; /* Default is counts */
    /* Only decremented after all elements from a scan have been copied into async_buff */
    size_t                          async_scans_remaining;
#else
    void *empty;
#endif
} cyhal_adc_t;

/**
  * @brief ADC configurator struct
  *
  * This struct allows a configurator to provide block configuration information
  * to the HAL. Because configurator-generated configurations are platform
  * specific, the contents of this struct is subject to change between platforms
  * and/or HAL releases.
  */
typedef struct
{
#if CYHAL_DRIVER_AVAILABLE_ADC
    const cyhal_resource_inst_t*        resource;
    cy_stc_sar_config_t const*          config;
    const cyhal_clock_t *               clock;
    uint8_t                             num_channels;
    const uint32_t*                     achieved_acquisition_time; /* length num_channels */
    /* Pins are deliberately omitted from this struct. The configurator supports routing
     * from arbitrary sources that aren't necessarily pins. The HAL only needs to know what
     * the pins are for the purposes of reservation, freeing, and routing - all of which the
     * configurators take care of in this flow */
#else
     void *empty;
#endif
} cyhal_adc_configurator_t;

/**
  * @brief ADC channel object
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef struct _cyhal_adc_channel_s { /* Struct given an explicit name to make the forward declaration above work */
#ifdef CY_IP_M0S8PASS4A_SAR_INSTANCES
    cyhal_adc_t*                adc;
    cyhal_gpio_t                vplus;
    cyhal_gpio_t                vminus;
    uint8_t                     channel_idx;
    uint32_t                    minimum_acquisition_ns;
#else
    void *empty;
#endif
} cyhal_adc_channel_t;

/** @brief Comparator object */
typedef struct {
#if defined(CY_IP_M0S8LPCOMP_INSTANCES) || defined(CY_IP_M0S8PASS4A_CTB_INSTANCES)
    bool                                owned_by_configurator;
    cyhal_resource_inst_t               resource;
    union
    {
#if defined(CY_IP_M0S8PASS4A_CTB_INSTANCES)
        CTBM_Type                       *base_ctb;
#endif
#if defined(CY_IP_M0S8LPCOMP_INSTANCES)
        LPCOMP_Type                     *base_lpcomp;
#endif
    };
#if defined(CY_IP_M0S8LPCOMP_INSTANCES)
    cy_stc_lpcomp_context_t             context;
#endif
    cyhal_gpio_t                        pin_vin_p;
    cyhal_gpio_t                        pin_vin_m;
    cyhal_gpio_t                        pin_out;
    cyhal_event_callback_data_t         callback_data;
    uint32_t                            irq_cause;
#else
    void *empty;
#endif
} cyhal_comp_t;

/**
  * @brief Comp configurator struct
  *
  * This struct allows a configurator to provide block configuration information
  * to the HAL. Because configurator-generated configurations are platform
  * specific, the contents of this struct is subject to change between platforms
  * and/or HAL releases.
  */
typedef struct
{
#if CYHAL_DRIVER_AVAILABLE_COMP
    const cyhal_resource_inst_t*        resource;
    union
    {
    #if _CYHAL_DRIVER_AVAILABLE_COMP_LP
        const cy_stc_lpcomp_config_t *lpcomp;
    #endif
    #if _CYHAL_DRIVER_AVAILABLE_COMP_CTB
        const cy_stc_ctb_opamp_config_t *opamp;
    #endif
    };
    /* No GPIOs specified. The configurator could have routed from a non-preferred
     * GPIO, or from another non-GPIO on-chip source. */
#else
    void *empty;
#endif
} cyhal_comp_configurator_t;

/**
  * @brief Flash object
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef struct {
    void *empty;
} cyhal_flash_t;

/**
  * @brief I2C object
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef struct {
#if defined (CY_IP_MXSCB) || defined(CY_IP_M0S8SCB)
    CySCB_Type*                               base;
    cyhal_resource_inst_t                     resource;
    cyhal_gpio_t                              pin_sda;
    cyhal_gpio_t                              pin_scl;
    cyhal_clock_t                             clock;
    bool                                      is_clock_owned;
    cy_stc_scb_i2c_context_t                  context;
    cy_stc_scb_i2c_master_xfer_config_t       rx_config;
    cy_stc_scb_i2c_master_xfer_config_t       tx_config;
    uint32_t                                  irq_cause;
    uint16_t                                  pending;
    cyhal_event_callback_data_t               callback_data;
    bool                                      dc_configured;
#else
    void *empty;
#endif
} cyhal_i2c_t;

/**
  * @brief I2C configurator struct
  *
  * This struct allows a configurator to provide block configuration information
  * to the HAL. Because configurator-generated configurations are platform
  * specific, the contents of this struct is subject to change between platforms
  * and/or HAL releases.
  */
typedef struct {
#if defined (CY_IP_MXSCB) || defined(CY_IP_M0S8SCB)
    const cyhal_resource_inst_t*              resource;
    const cy_stc_scb_i2c_config_t*            config;
    const cyhal_clock_t*                      clock;
#else
    void *empty;
#endif /* defined (CY_IP_MXSCB) || defined(CY_IP_M0S8SCB) */
} cyhal_i2c_configurator_t;

/**
  * @brief EZI2C object
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef struct {
#if defined (CY_IP_MXSCB) || defined(CY_IP_M0S8SCB)
    CySCB_Type*                         base;
    cyhal_resource_inst_t               resource;
    cyhal_gpio_t                        pin_sda;
    cyhal_gpio_t                        pin_scl;
    cyhal_clock_t                       clock;
    bool                                is_clock_owned;
    cy_stc_scb_ezi2c_context_t          context;
    uint32_t                            irq_cause;
    cyhal_event_callback_data_t         callback_data;
    bool                                two_addresses;
    bool                                dc_configured;
#else
    void *empty;
#endif
} cyhal_ezi2c_t;

/**
  * @brief EZI2C configurator struct
  *
  * This struct allows a configurator to provide block configuration information
  * to the HAL. Because configurator-generated configurations are platform
  * specific, the contents of this struct is subject to change between platforms
  * and/or HAL releases.
  */
typedef struct {
#if defined (CY_IP_MXSCB) || defined(CY_IP_M0S8SCB)
    const cyhal_resource_inst_t*            resource;
    const cy_stc_scb_ezi2c_config_t*        config;
    const cyhal_clock_t*                    clock;
#else
    void *empty;
#endif /* defined (CY_IP_MXSCB) || defined(CY_IP_M0S8SCB) */
} cyhal_ezi2c_configurator_t;

/**
  * @brief LPTIMER object
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef struct {
#ifdef CY_IP_M0S8WCO
    WCO_Type                         *base;
    cyhal_resource_inst_t            resource;
    cyhal_event_callback_data_t      callback_data;
    bool                             clear_int_mask;
    bool                             isr_call_user_cb;
#else
    void *empty;
#endif
} cyhal_lptimer_t;

/**
  * @brief OPAMP object
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef struct {
#if defined(CY_IP_M0S8PASS4A_CTB_INSTANCES)
    bool                                owned_by_configurator;
    CTBM_Type*                          base;
    cyhal_resource_inst_t               resource;
    cyhal_gpio_t                        pin_vin_p;
    cyhal_gpio_t                        pin_vin_m;
    cyhal_gpio_t                        pin_vout;
    bool                                is_init_success;
#else
    void *empty;
#endif
} cyhal_opamp_t;

/**
  * @brief Opamp configurator struct
  *
  * This struct allows a configurator to provide block configuration information
  * to the HAL. Because configurator-generated configurations are platform
  * specific, the contents of this struct is subject to change between platforms
  * and/or HAL releases.
  */
typedef struct
{
#if CYHAL_DRIVER_AVAILABLE_OPAMP
    const cyhal_resource_inst_t*        resource;
    const cy_stc_ctb_opamp_config_t*    config;
    /* No GPIOs specified. The configurator could have routed from a non-preferred
     * GPIO, or from another non-GPIO on-chip source. */
#else
    void *empty;
#endif
} cyhal_opamp_configurator_t;

/**
  * @brief PWM object
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef struct {
#ifdef CY_IP_M0S8TCPWM
    cyhal_tcpwm_t  tcpwm;
    cyhal_gpio_t   pin;
    cyhal_gpio_t   pin_compl;
#else
    void *empty;
#endif
} cyhal_pwm_t;

/**
  * @brief PWM configurator struct
  *
  * This struct allows a configurator to provide block configuration information
  * to the HAL. Because configurator-generated configurations are platform
  * specific, the contents of this struct is subject to change between platforms
  * and/or HAL releases.
  */
typedef struct
{
#if CYHAL_DRIVER_AVAILABLE_PWM
    const cyhal_resource_inst_t*        resource;
    cy_stc_tcpwm_pwm_config_t const*    config;
    const cyhal_clock_t *               clock;
#else
    void *empty;
#endif /* CYHAL_DRIVER_AVAILABLE_PWM */
} cyhal_pwm_configurator_t;

/**
  * @brief Quadrature Decoder object
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef struct {
#ifdef CY_IP_M0S8TCPWM
    cyhal_tcpwm_t   tcpwm;
    cyhal_gpio_t    phi_a;
    cyhal_gpio_t    phi_b;
    cyhal_gpio_t    index;
    uint32_t        last_counter_value;
#else
    void *empty;
#endif
} cyhal_quaddec_t;

/**
  * @brief Quadrature Decoder configurator struct
  *
  * This struct allows a configurator to provide block configuration information
  * to the HAL. Because configurator-generated configurations are platform
  * specific, the contents of this struct is subject to change between platforms
  * and/or HAL releases.
  */
typedef struct
{
#if CYHAL_DRIVER_AVAILABLE_QUADDEC
    const cyhal_resource_inst_t*            resource;
    const cy_stc_tcpwm_quaddec_config_t*    config;
    const cyhal_clock_t *                   clock;
#else
    void *empty;
#endif /* CYHAL_DRIVER_AVAILABLE_QUADDEC */
} cyhal_quaddec_configurator_t;

/**
  * @brief RTC object
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef struct {
    void *empty;
} cyhal_rtc_t;

/**
  * @brief RTC configurator struct
  *
  * CAT 2 does not support the RTC, so no config structure.
  */
typedef void cyhal_rtc_configurator_t;

/**
  * @brief SPI object
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef struct {
#if defined (CY_IP_MXSCB) || defined(CY_IP_M0S8SCB)
    CySCB_Type*                               base;
    cyhal_resource_inst_t                     resource;
    cyhal_gpio_t                              pin_miso;
    cyhal_gpio_t                              pin_mosi;
    cyhal_gpio_t                              pin_sclk;
    cyhal_gpio_t                              pin_ssel[4];
    cy_en_scb_spi_polarity_t                  ssel_pol[4];
    uint8_t                                   active_ssel;
    cyhal_clock_t                             clock;
    cy_en_scb_spi_sclk_mode_t                 clk_mode;
    uint8_t                                   mode;
    uint8_t                                   data_bits;
    bool                                      is_slave;
    bool                                      alloc_clock;
    uint8_t                                   oversample_value;
    bool                                      msb_first;
    cy_stc_scb_spi_context_t                  context;
    uint32_t                                  irq_cause;
    uint16_t volatile                         pending;
    uint8_t                                   write_fill;
    void                                      *rx_buffer;
    uint32_t                                  rx_buffer_size;
    const void                                *tx_buffer;
    uint32_t                                  tx_buffer_size;
    bool                                      is_async;
    cyhal_event_callback_data_t               callback_data;
    bool                                      dc_configured;
#else
    void *empty;
#endif
} cyhal_spi_t;

/**
  * @brief SPI configurator struct
  *
  * This struct allows a configurator to provide block configuration information
  * to the HAL. Because configurator-generated configurations are platform
  * specific, the contents of this struct is subject to change between platforms
  * and/or HAL releases.
  */
typedef struct {
#if defined (CY_IP_MXSCB) || defined(CY_IP_M0S8SCB)
    const cyhal_resource_inst_t*            resource;
    const cy_stc_scb_spi_config_t*          config;
    const cyhal_clock_t*                    clock;
    struct
    {
        cyhal_gpio_t                        sclk;
        cyhal_gpio_t                        ssel[4];
        cyhal_gpio_t                        mosi;
        cyhal_gpio_t                        miso;
    } gpios;
#else
    void *empty;
#endif /* defined (CY_IP_MXSCB) || defined(CY_IP_M0S8SCB) */
} cyhal_spi_configurator_t;

/**
  * @brief Timer object
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef struct {
#ifdef CY_IP_M0S8TCPWM
    cyhal_tcpwm_t  tcpwm;
    uint32_t       default_value;
#else
    void *empty;
#endif
} cyhal_timer_t;

/**
  * @brief Timer configurator struct
  *
  * This struct allows a configurator to provide block configuration information
  * to the HAL. Because configurator-generated configurations are platform
  * specific, the contents of this struct is subject to change between platforms
  * and/or HAL releases.
  */
typedef struct
{
#if CYHAL_DRIVER_AVAILABLE_TIMER
    const cyhal_resource_inst_t*            resource;
    const cy_stc_tcpwm_counter_config_t*    config;
    const cyhal_clock_t *                   clock;
#else
    void *empty;
#endif /* CYHAL_DRIVER_AVAILABLE_TIMER */
} cyhal_timer_configurator_t;

/**
  * @brief UART object
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef struct {
#if defined (CY_IP_MXSCB) || defined(CY_IP_M0S8SCB)
    CySCB_Type*                      base;
    cyhal_resource_inst_t            resource;
    cyhal_gpio_t                     pin_rx;
    cyhal_gpio_t                     pin_tx;
    cyhal_gpio_t                     pin_cts;
    cyhal_gpio_t                     pin_rts;
    bool                             cts_enabled;
    bool                             rts_enabled;
    bool                             is_clock_owned;
    cyhal_clock_t                    clock;
    cy_stc_scb_uart_context_t        context;
    cy_stc_scb_uart_config_t         config;
    uint32_t                         irq_cause;
    en_hsiom_sel_t                   saved_tx_hsiom;
    en_hsiom_sel_t                   saved_rts_hsiom;
    cyhal_event_callback_data_t      callback_data;
    bool                             dc_configured;
#else
    void *empty;
#endif
} cyhal_uart_t;

/**
  * @brief UART configurator struct
  *
  * This struct allows a configurator to provide block configuration information
  * to the HAL. Because configurator-generated configurations are platform
  * specific, the contents of this struct is subject to change between platforms
  * and/or HAL releases.
  */
typedef struct {
#if defined (CY_IP_MXSCB) || defined(CY_IP_M0S8SCB)
    const cyhal_resource_inst_t*            resource;
    const cy_stc_scb_uart_config_t*         config;
    const cyhal_clock_t*                    clock;
    struct
    {
        cyhal_gpio_t                        pin_tx;
        cyhal_gpio_t                        pin_rts;
        cyhal_gpio_t                        pin_cts;
    } gpios;
#else
    void *empty;
#endif /* defined (CY_IP_MXSCB) || defined(CY_IP_M0S8SCB) */
} cyhal_uart_configurator_t;

/**
  * @brief WDT object
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef struct {
    uint8_t placeholder;
} cyhal_wdt_t;

/**
  * @brief CRC object
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef struct {
#if (CYHAL_DRIVER_AVAILABLE_CRC)
    CRYPTO_Type*                        base;
    cyhal_resource_inst_t               resource;
    uint32_t                            crc_width;
#else
    void *empty;
#endif
} cyhal_crc_t;

/**
* @brief RNG object
*
* Application code should not rely on the specific contents of this struct.
* They are considered an implementation detail which is subject to change
* between platforms and/or HAL releases.
*/
typedef struct {
#if (CYHAL_DRIVER_AVAILABLE_TRNG)
#if defined(CY_IP_M0S8CRYPTOLITE)
    CRYPTOLITE_Type*                    base;
#else
    CRYPTO_Type*                        base;
#endif
    cyhal_resource_inst_t               resource;
#else
    void *empty;
#endif
} cyhal_trng_t;

struct _cyhal_audioss_s;

/**
  * @brief Interface to abstract away the driver-specific differences between TDM and I2S
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef struct
{
#if (CYHAL_DRIVER_AVAILABLE_I2S) || (CYHAL_DRIVER_AVAILABLE_TDM)
    /** Convert a PDL-level interrupt cause to a HAL-level event */
    uint32_t (*convert_interrupt_cause)(uint32_t pdl_event);
    /** Convert a HAL-level event to a PDL-level interrupt cause */
    uint32_t (*convert_to_pdl)(uint32_t hal_event);
    /** Invoke the user callback with the specified HAL event.
     * Only called after the user callback has been verified to not be null. */
    void     (*invoke_user_callback)(struct _cyhal_audioss_s* obj, uint32_t hal_event);
    /** HAL event mask that represents the empty state */
    uint32_t event_mask_empty;
    /** HAL event mask that represents the half empty state */
    uint32_t event_mask_half_empty;
    /** HAL event mask that represents async tx complete */
    uint32_t event_tx_complete;
    /** Error code for invalid pin */
    cy_rslt_t err_invalid_pin;
    /** Error code for invalid argument */
    cy_rslt_t err_invalid_arg;
    /** Error code for invalid clock frequency */
    cy_rslt_t err_clock;
    /** Error code for configuration not supported */
    cy_rslt_t err_not_supported;
#else
    void *empty;
#endif
} _cyhal_audioss_interface_t;

/**
  * @brief Shared data between i2s and tdm
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef struct _cyhal_audioss_s { /* Explicit name to enable forward declaration */
#if (CYHAL_DRIVER_AVAILABLE_I2S) || (CYHAL_DRIVER_AVAILABLE_TDM)
    bool                            owned_by_configurator;
    I2S_Type                        *base;
    cyhal_resource_inst_t           resource;
    cyhal_gpio_t                    pin_tx_sck;
    cyhal_gpio_t                    pin_tx_ws;
    cyhal_gpio_t                    pin_tx_sdo;
    cyhal_gpio_t                    pin_tx_mclk;
    uint32_t                        mclk_hz_tx;
    uint8_t                         channel_length_tx;
    uint8_t                         word_length_tx;
    cyhal_clock_t                   clock;
    bool                            is_clock_owned;
    uint16_t                        user_enabled_events;
    cyhal_event_callback_data_t     callback_data;
    cyhal_async_mode_t              async_mode;
    uint8_t                         async_dma_priority;
    cyhal_dma_t                     tx_dma;
    // Note: When the async DMA mode is in use, these variables will always reflect the state
    // that the transfer will be in after the in-progress DMA transfer, if any, is complete
    volatile const void             *async_tx_buff;
    volatile size_t                 async_tx_length;
    volatile bool                   pm_transition_ready;
    cyhal_syspm_callback_data_t     pm_callback;
    const _cyhal_audioss_interface_t *interface;
#else
    void *empty;
#endif
} _cyhal_audioss_t;

/**
  * @brief Shared I2S/TDM configurator struct
  *
  * This struct allows a configurator to provide block configuration information
  * to the HAL. Because configurator-generated configurations are platform
  * specific, the contents of this struct is subject to change between platforms
  * and/or HAL releases.
  */
typedef struct
{
#if CYHAL_DRIVER_AVAILABLE_TDM || CYHAL_DRIVER_AVAILABLE_I2S
    const cyhal_resource_inst_t*            resource;
    const cy_stc_i2s_config_t*              config;
    const cyhal_clock_t *                   clock;
    uint32_t                                mclk_hz_tx; /* Must be 0 if mclk is not in use for this direction */
#else
    void *empty;
#endif /* CYHAL_DRIVER_AVAILABLE_TDM || CYHAL_DRIVER_AVAILABLE_I2S */
} _cyhal_audioss_configurator_t;

/**
  * @brief I2S object
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef _cyhal_audioss_t cyhal_i2s_t;

/**
  * @brief I2S configurator struct
  *
  * This struct allows a configurator to provide block configuration information
  * to the HAL. Because configurator-generated configurations are platform
  * specific, the contents of this struct is subject to change between platforms
  * and/or HAL releases.
  */
typedef _cyhal_audioss_configurator_t cyhal_i2s_configurator_t;

/**
  * @brief TDM object
  *
  * Application code should not rely on the specific contents of this struct.
  * They are considered an implementation detail which is subject to change
  * between platforms and/or HAL releases.
  */
typedef _cyhal_audioss_t cyhal_tdm_t;

/**
  * @brief TDM configurator struct
  *
  * This struct allows a configurator to provide block configuration information
  * to the HAL. Because configurator-generated configurations are platform
  * specific, the contents of this struct is subject to change between platforms
  * and/or HAL releases.
  */
typedef _cyhal_audioss_configurator_t cyhal_tdm_configurator_t;

#if defined(__cplusplus)
}
#endif /* __cplusplus */

/** \} group_hal_impl_hw_types */
/** \} group_hal_impl */
